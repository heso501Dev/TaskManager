<script>
    /* ===========================
                   Status
          =========================== */

    function sendStatusUpdate(status, rwIdx) {
        // Prepare the data to send
        var data = { id: rwIdx, status: status };

        // Make a fetch request to send the status update to the server
        fetch('/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    console.log("Status update sent successfully");
                } else {
                    console.error("Failed to send status update");
                }
            })
            .catch(error => {
                console.error("Error:", error);
            });
    }
    /* ===========================
             Add Task
       =========================== */
    function addTask() {
        fetch('/addtask')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                console.log(response.url);
                // Assign the response URL to the variable 're'
                let re = response.url;
                // Redirect the user to the response URL
                window.location.href = re;
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    // edit

    const editForm = document.getElementById('editForm');
    if (editForm) {
        editForm.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Get form data
            const formData = new FormData(this);

            // Convert form data to JSON
            const jsonObject = {};
            formData.forEach((value, key) => {
                jsonObject[key] = value;
            });
            const jsonData = JSON.stringify(jsonObject);

            // Send JSON data using Fetch
            fetch(this.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json' 
              },
                body: jsonData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    console.log('Form data sent successfully');
                    window.location.href = "http://localhost:4000";
                    


                })
                .catch(error => {
                    console.error('Error sending form data:', error);

                });
        });
    }


    /* ===========================
             Status Modifier
       =========================== */

    // Get all elements with class 'status'
    const statuses = document.querySelectorAll('.status');

    // Loop through each 'status' element
    statuses.forEach(function (status) {
        // Find the corresponding image within the same row
        const displayedImage = status.parentElement.parentElement.querySelector('.statusImg');

        // Add change event listener to each 'status' element
        status.addEventListener('change', function () {
            // Get the selected option value
            const selectedOption = status.value;

            // Update the image source based on the selected option
            if (selectedOption === '1') {
                displayedImage.src = '/public/imgs/Check.png';
            } else if (selectedOption === '0') {
                displayedImage.src = '/public/imgs/NoCheck.png';
            }
        });
    });


    /* ===========================
             Priority
       =========================== */



    // Get all priority cells
    const priorityCells = document.querySelectorAll('.priority');

    // Loop through each priority cell
    priorityCells.forEach(function (cell) {
        // Check priority and update style
        updatePriorityStyle(cell);
    });

    // Function to update priority cell style
    function updatePriorityStyle(cell) {
        const priorityValue = cell.textContent.trim().toLowerCase();
        const childElement = cell.firstElementChild; 

        if (priorityValue === 'high') {
            childElement.style.backgroundColor = '#F34100';
            childElement.classList.add('priority')
        } else if (priorityValue === 'moderate') {
            childElement.style.backgroundColor = '#FFA500';
            childElement.classList.add('priority')
        } else if (priorityValue === 'low') {
            childElement.style.backgroundColor = 'green';
            childElement.classList.add('priority')
        }
    }


    



</script>